package main

import (
	"testing"
)

var exampleInput = []string{
	"x=495, y=2..7",
	"y=7, x=495..501",
	"x=501, y=3..7",
	"x=498, y=2..4",
	"x=506, y=1..2",
	"x=498, y=10..13",
	"x=504, y=10..13",
	"y=13, x=498..504",
}

func Test_parseInput(t *testing.T) {
	want := `......+.......
............#.
.#..#.......#.
.#..#..#......
.#..#..#......
.#.....#......
.#.....#......
.#######......
..............
..............
....#.....#...
....#.....#...
....#.....#...
....#######...`

	reservoir := NewReservoir(exampleInput)
	if got := reservoir.String(); want != got {
		t.Errorf("got:\n%v\n\nwant:\n%v", got, want)
	}
}

func TestReservoir_PourUntilRestingCreated(t *testing.T) {
	tests := []struct {
		name       string
		floodCount int
		want       string
	}{
		{
			"After 5 squares", 1,
			`......+.......
......|.....#.
.#..#.|.....#.
.#..#.|#......
.#..#.|#......
.#....|#......
.#~~~~~#......
.#######......
..............
..............
....#.....#...
....#.....#...
....#.....#...
....#######...`,
		},
		{
			"After another 5 squares", 1,
			`......+.......
......|.....#.
.#..#.|.....#.
.#..#.|#......
.#..#.|#......
.#~~~~~#......
.#~~~~~#......
.#######......
..............
..............
....#.....#...
....#.....#...
....#.....#...
....#######...`,
		},
		{
			"After another 2 fills", 2,
			`......+.......
......|.....#.
.#..#.|.....#.
.#..#~~#......
.#..#~~#......
.#~~~~~#......
.#~~~~~#......
.#######......
..............
..............
....#.....#...
....#.....#...
....#.....#...
....#######...`,
		},

		{
			"After the first overflow", 1,
			`......+.......
......|.....#.
.#..#||||...#.
.#..#~~#|.....
.#..#~~#|.....
.#~~~~~#|.....
.#~~~~~#|.....
.#######|.....
........|.....
........|.....
....#...|.#...
....#...|.#...
....#~~~~~#...
....#######...`,
		},
		{
			"After two more fills", 2,
			`......+.......
......|.....#.
.#..#||||...#.
.#..#~~#|.....
.#..#~~#|.....
.#~~~~~#|.....
.#~~~~~#|.....
.#######|.....
........|.....
........|.....
....#~~~~~#...
....#~~~~~#...
....#~~~~~#...
....#######...`,
		},
		{
			"After the final overflow", 1,
			`......+.......
......|.....#.
.#..#||||...#.
.#..#~~#|.....
.#..#~~#|.....
.#~~~~~#|.....
.#~~~~~#|.....
.#######|.....
........|.....
...|||||||||..
...|#~~~~~#|..
...|#~~~~~#|..
...|#~~~~~#|..
...|#######|..`,
		},
	}

	r := NewReservoir(exampleInput)

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			for i := 0; i < tt.floodCount; i++ {
				r.FlowUntilSettledCreated()
			}

			if got := r.String(); got != tt.want {
				t.Errorf("got:\n%v\n\nwant:\n%v", got, tt.want)
			}
		})
	}
}

func TestReservoir_RunSimulation(t *testing.T) {
	r := NewReservoir(exampleInput)
	got := r.RunSimulation()
	const want = 57

	if got != want {
		t.Errorf("got: %v, want: %v", got, want)
	}
}
